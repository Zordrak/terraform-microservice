#!/bin/bash
set -e
aws=/usr/local/bin/aws

#Get AWS Token using profile role_arn
$aws configure set profile.default.region eu-west-1
$aws configure set profile.default.output json
$aws configure set profile.ebs.role_arn $(wget -q -O - 169.254.169.254/latest/meta-data/iam/info | grep "InstanceProfileArn" | awk -F\"  '$2 == "InstanceProfileArn" {print $4}')
$aws configure set profile.ebs.source_profile default

#Get current instance ID and Role
instance_id=$(wget -q -O - 169.254.169.254/latest/meta-data/instance-id)
instance_role=$($aws ec2 describe-instances --instance-ids ${instance_id} --query 'Reservations[*].Instances[].Tags[?Key==`Role`].Value[]' --output text)

#Get list of volumes which match instance Role
volumes_ids=$($aws ec2 describe-volumes --filter Name=tag:Name,Values="${instance_role}" --query 'Volumes[].[VolumeId]' --output text)

#Perform operations with volumes list
for volumes in ${volumes_ids} ; do
#Get data from aws
  mountpoint=$($aws ec2 describe-volumes --volume-ids ${volumes} --query 'Volumes[].Tags[?Key==`MountPoint`].Value[]' --output text)
  dev=$($aws ec2 describe-volumes --volume-ids ${volumes} --query 'Volumes[].Tags[?Key==`Dev`].Value[]' --output text)
  rhelmp=${dev//sd/xvd}

#Attach volume to this instance
  $aws ec2 attach-volume --volume-id=${volumes} --instance-id=${instance_id} --device=/dev/${rhelmp}

#Wait for volume to appear on /proc/partition list
  until grep -oh "${rhelmp}" /proc/partitions>>/dev/null; do sleep 1; done

#Determine what filesystem is on partition
  devfs=$(lsblk -rio "NAME,FSTYPE" | awk -F" " '$1 == "'"${rhelmp}"'" {print $2}')

#If filesystem exist mount it,else format with ext4 and mount
  if [ -z ${devfs} ]
    then
      echo "partition doesn't have any filesystem, mkfs.ext4 will now run to create ext4 filesystem. Afterwards mounting partition to ${mountpoint}"
      mkfs.ext4 /dev/${rhelmp} >>/var/log/userdatash.log
      mount /dev/${rhelmp} ${mountpoint} -t ext4 >>/var/log/userdatash.log
    else
      if [ -z "$(df | grep ${mountpoint})" ]
        then
          echo "partition contain ${devfs} filesystem, mounting to ${mountpoint}"
          mount /dev/${rhelmp} ${mountpoint} -t ${devfs} >>/var/log/userdatash.log
        else
          echo "partition already mounted to ${mountpoint}, nothing todo"
      fi
  fi

#Check if entry if /etc/fstab exist, otherwise create one
  fstab=$(grep "${mountpoint}" /etc/fstab)
  fstabfs=$(lsblk -rio "NAME,FSTYPE" | awk -F" " '$1 == "'"${rhelmp}"'" {print $2}')
  if [ -z "${fstab}" ]
    then
      echo "fstab entry for ${mountpoint} doesn't exists, adding fstab entry now"
      echo "${mountpoint}               /dev/${rhelmp}                  ${fstabfs}    defaults        0       0" >>/etc/fstab
    else
      echo "fstab entry for ${mountpoint} already exists, exiting"
  fi
done
